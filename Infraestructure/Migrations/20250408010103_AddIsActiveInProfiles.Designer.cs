// <auto-generated />
using System;
using Infraestructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250408010103_AddIsActiveInProfiles")]
    partial class AddIsActiveInProfiles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ActionType", b =>
                {
                    b.Property<int>("ActionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActionTypeId");

                    b.ToTable("ActionTypes");
                });

            modelBuilder.Entity("Domain.Entities.AuditLog", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditId"));

                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AuditId");

                    b.HasIndex("ActionTypeId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Domain.Entities.Band", b =>
                {
                    b.Property<int>("BandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BandId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BandId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Bands");
                });

            modelBuilder.Entity("Domain.Entities.BandInvitation", b =>
                {
                    b.Property<int>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvitationId"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("BandId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvitedBy")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusInvitationId")
                        .HasColumnType("int");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvitationId");

                    b.HasIndex("InvitedBy");

                    b.HasIndex("StatusInvitationId");

                    b.ToTable("BandInvitations");
                });

            modelBuilder.Entity("Domain.Entities.BandRole", b =>
                {
                    b.Property<int>("BandRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BandRoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BandRoleId");

                    b.ToTable("BandRoles");

                    b.HasData(
                        new
                        {
                            BandRoleId = 1,
                            Name = "Director"
                        },
                        new
                        {
                            BandRoleId = 2,
                            Name = "Musico"
                        },
                        new
                        {
                            BandRoleId = 3,
                            Name = "Técnico"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Gender", b =>
                {
                    b.Property<int>("IdGender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGender"));

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdGender");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            IdGender = 1,
                            GenderName = "Masculino"
                        },
                        new
                        {
                            IdGender = 2,
                            GenderName = "Femenino"
                        },
                        new
                        {
                            IdGender = 3,
                            GenderName = "Otro"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Instrument", b =>
                {
                    b.Property<int>("InstrumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstrumentId"));

                    b.Property<string>("NameInstrument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstrumentId");

                    b.ToTable("Instruments");

                    b.HasData(
                        new
                        {
                            InstrumentId = 1,
                            NameInstrument = "Trompeta"
                        },
                        new
                        {
                            InstrumentId = 2,
                            NameInstrument = "Guitarra"
                        },
                        new
                        {
                            InstrumentId = 3,
                            NameInstrument = "Bateria"
                        },
                        new
                        {
                            InstrumentId = 4,
                            NameInstrument = "Otro"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionId = 1,
                            Description = "Permite crear recursos",
                            Name = "Crear"
                        },
                        new
                        {
                            PermissionId = 2,
                            Description = "Permite leer recursos",
                            Name = "Leer"
                        },
                        new
                        {
                            PermissionId = 3,
                            Description = "Permite actualizar recursos",
                            Name = "Actualizar"
                        },
                        new
                        {
                            PermissionId = 4,
                            Description = "Permite eliminar recursos",
                            Name = "Eliminar"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusInvitationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserUniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1990, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 4, 7, 12, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Juan Pérez",
                            GenderId = 1,
                            IsActive = true,
                            UserUniqueId = "user-unique-001"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1992, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 4, 7, 12, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "María López",
                            GenderId = 2,
                            IsActive = true,
                            UserUniqueId = "user-unique-002"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1985, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 4, 7, 12, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Carlos Martínez",
                            GenderId = 1,
                            IsActive = true,
                            UserUniqueId = "user-unique-003"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Administrador del sistema",
                            Name = "Administrador"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Usuario estándar",
                            Name = "UsuarioEstandar"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Modera contenido",
                            Name = "Moderator"
                        });
                });

            modelBuilder.Entity("Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Song", b =>
                {
                    b.Property<int>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SongId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SongId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Domain.Entities.SongVersion", b =>
                {
                    b.Property<int>("VersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VersionId"));

                    b.Property<string>("Album")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlbumCoverPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BandId")
                        .HasColumnType("int");

                    b.Property<string>("Compas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rhythm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<string>("Tempo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VersionId");

                    b.HasIndex("BandId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SongId");

                    b.ToTable("SongVersions");
                });

            modelBuilder.Entity("Domain.Entities.SongVersionInstrumentPdf", b =>
                {
                    b.Property<int>("PdfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PdfId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<int>("UploadedBy")
                        .HasColumnType("int");

                    b.Property<int>("VersionId")
                        .HasColumnType("int");

                    b.HasKey("PdfId");

                    b.HasIndex("InstrumentId")
                        .IsUnique();

                    b.HasIndex("UploadedBy");

                    b.HasIndex("VersionId")
                        .IsUnique();

                    b.ToTable("SongVersionInstrumentPdfs");
                });

            modelBuilder.Entity("Domain.Entities.SongVersionInstrumentVideo", b =>
                {
                    b.Property<int>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VideoId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<int>("UploadedBy")
                        .HasColumnType("int");

                    b.Property<int>("VersionId")
                        .HasColumnType("int");

                    b.Property<string>("VideoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VideoId");

                    b.HasIndex("InstrumentId")
                        .IsUnique();

                    b.HasIndex("UploadedBy");

                    b.HasIndex("VersionId");

                    b.ToTable("SongVersionInstrumentVideos");
                });

            modelBuilder.Entity("Domain.Entities.SongVersionPdf", b =>
                {
                    b.Property<int>("PdfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PdfId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UploadedBy")
                        .HasColumnType("int");

                    b.Property<int>("VersionId")
                        .HasColumnType("int");

                    b.HasKey("PdfId");

                    b.HasIndex("UploadedBy");

                    b.HasIndex("VersionId")
                        .IsUnique();

                    b.ToTable("SongVersionPdfs");
                });

            modelBuilder.Entity("Domain.Entities.StatusInvitation", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Domain.Entities.UserBand", b =>
                {
                    b.Property<int>("UserBandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserBandId"));

                    b.Property<int>("BandId")
                        .HasColumnType("int");

                    b.Property<int>("BandRoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserBandId");

                    b.HasIndex("BandId");

                    b.HasIndex("BandRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBands");
                });

            modelBuilder.Entity("Domain.Entities.UserRol", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRol");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("UserInstrument", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "InstrumentId");

                    b.HasIndex("InstrumentId");

                    b.ToTable("UserInstrument");
                });

            modelBuilder.Entity("Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("Domain.Entities.ActionType", "ActionType")
                        .WithMany()
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionType");
                });

            modelBuilder.Entity("Domain.Entities.Band", b =>
                {
                    b.HasOne("Domain.Entities.Profile", "Creator")
                        .WithMany("Bands")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Domain.Entities.BandInvitation", b =>
                {
                    b.HasOne("Domain.Entities.Profile", "InvitedByProfile")
                        .WithMany("BandInvitations")
                        .HasForeignKey("InvitedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StatusInvitation", "Status")
                        .WithMany("BandInvitations")
                        .HasForeignKey("StatusInvitationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InvitedByProfile");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.Entities.Profile", b =>
                {
                    b.HasOne("Domain.Entities.Gender", "gender")
                        .WithMany("Profiles")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("gender");
                });

            modelBuilder.Entity("Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("Domain.Entities.Permission", "Permission")
                        .WithMany("RolesPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("RolesPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Song", b =>
                {
                    b.HasOne("Domain.Entities.Profile", "Creator")
                        .WithMany("Songs")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Domain.Entities.SongVersion", b =>
                {
                    b.HasOne("Domain.Entities.Band", "Band")
                        .WithMany("Songs")
                        .HasForeignKey("BandId");

                    b.HasOne("Domain.Entities.Profile", "Creator")
                        .WithMany("SongVersions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Song", "Song")
                        .WithMany("Versions")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Band");

                    b.Navigation("Creator");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Domain.Entities.SongVersionInstrumentPdf", b =>
                {
                    b.HasOne("Domain.Entities.Instrument", "Instrument")
                        .WithOne("SongVersionInstrumentPdf")
                        .HasForeignKey("Domain.Entities.SongVersionInstrumentPdf", "InstrumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Profile", "Uploader")
                        .WithMany("SongVersionInstrumentPdfs")
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SongVersion", "Version")
                        .WithOne("SongVersionInstrumentPdf")
                        .HasForeignKey("Domain.Entities.SongVersionInstrumentPdf", "VersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("Uploader");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Domain.Entities.SongVersionInstrumentVideo", b =>
                {
                    b.HasOne("Domain.Entities.Instrument", "Instrument")
                        .WithOne("SongVersionInstrumentVideos")
                        .HasForeignKey("Domain.Entities.SongVersionInstrumentVideo", "InstrumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Profile", "Uploader")
                        .WithMany("SongVersionInstrumentVideos")
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SongVersion", "Version")
                        .WithMany("SongVersionInstrumentVideos")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("Uploader");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Domain.Entities.SongVersionPdf", b =>
                {
                    b.HasOne("Domain.Entities.Profile", "Uploader")
                        .WithMany("SongVersionPdfs")
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SongVersion", "Version")
                        .WithOne("SongVersionn")
                        .HasForeignKey("Domain.Entities.SongVersionPdf", "VersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Uploader");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Domain.Entities.UserBand", b =>
                {
                    b.HasOne("Domain.Entities.Band", "Band")
                        .WithMany("UsersBand")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BandRole", "BandRole")
                        .WithMany("UsersBand")
                        .HasForeignKey("BandRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Profile", "User")
                        .WithMany("UsersBand")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Band");

                    b.Navigation("BandRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserRol", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("UsersRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Profile", "User")
                        .WithMany("UsersRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserInstrument", b =>
                {
                    b.HasOne("Domain.Entities.Instrument", "Instrument")
                        .WithMany("UserInstruments")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Profile", "User")
                        .WithMany("UserInstruments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Band", b =>
                {
                    b.Navigation("Songs");

                    b.Navigation("UsersBand");
                });

            modelBuilder.Entity("Domain.Entities.BandRole", b =>
                {
                    b.Navigation("UsersBand");
                });

            modelBuilder.Entity("Domain.Entities.Gender", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Domain.Entities.Instrument", b =>
                {
                    b.Navigation("SongVersionInstrumentPdf")
                        .IsRequired();

                    b.Navigation("SongVersionInstrumentVideos")
                        .IsRequired();

                    b.Navigation("UserInstruments");
                });

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolesPermissions");
                });

            modelBuilder.Entity("Domain.Entities.Profile", b =>
                {
                    b.Navigation("BandInvitations");

                    b.Navigation("Bands");

                    b.Navigation("SongVersionInstrumentPdfs");

                    b.Navigation("SongVersionInstrumentVideos");

                    b.Navigation("SongVersionPdfs");

                    b.Navigation("SongVersions");

                    b.Navigation("Songs");

                    b.Navigation("UserInstruments");

                    b.Navigation("UsersBand");

                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("RolesPermissions");

                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("Domain.Entities.Song", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("Domain.Entities.SongVersion", b =>
                {
                    b.Navigation("SongVersionInstrumentPdf")
                        .IsRequired();

                    b.Navigation("SongVersionInstrumentVideos");

                    b.Navigation("SongVersionn")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.StatusInvitation", b =>
                {
                    b.Navigation("BandInvitations");
                });
#pragma warning restore 612, 618
        }
    }
}
